{"version":3,"sources":["webpack:///./src/components/CategorizedList/index.jsx","webpack:///./src/templates/CategorizedList.jsx"],"names":["CategorizedList","_ref","data","location","page","getPage","category","flow","get","split","allPosts","getPosts","filter","isEqual","postCount","size","posts","slice","CONTENT_PER_PAGE","react_default","a","createElement","react","PostsWrapper","Helmet_default","toUpper","name","content","isEmpty","map","post","node","path","frontmatter","images","tags","Card","Object","assign","key","Pagination","prefix","propTypes","PropTypes","shape","isRequired","__webpack_require__","d","__webpack_exports__","pageQuery","CategorizedListTemplate","props","layout","components_CategorizedList"],"mappings":"uOAWMA,EAAkB,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SACzBC,EAAOC,YAAQ,EAARA,CAAWF,GAClBG,EAAWC,eACfC,cAAI,YACJC,gBAAM,KACND,cAAI,KAHWD,CAIfJ,GACIO,EAAWH,eACfI,IACAC,iBACEL,eACEC,cAAI,6BACJK,kBAAQP,KALGC,CAQfL,GACIY,EAAYC,eAAKL,GACjBM,EAAQC,iBACXb,EAAO,GAAKc,mBACbd,EAAOc,mBAFKD,CAGZP,GAEF,OACES,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACED,EAAAC,EAAAC,cAAA,yBACeI,kBAAQnB,IAEvBa,EAAAC,EAAAC,cAAA,QAAMK,KAAK,WAAWC,QAAO,YAAcF,kBAAQnB,MAEpDsB,kBAAQZ,GACPG,EAAAC,EAAAC,cAAA,+BAGE,KACHQ,cAAI,SAACC,GACJ,GAAuB,UAAnBA,EAAKC,KAAKC,KAAkB,CAC9B,IAAMC,EAAczB,cAAI,mBAAJA,CAAwBsB,GACpCI,EAAuBD,EAAvBC,OAAQC,EAAeF,EAAfE,KAAMH,EAASC,EAATD,KAEtB,OACEb,EAAAC,EAAAC,cAACe,EAAA,EAADC,OAAAC,OAAA,CAAMC,IAAKP,EAAMA,KAAMA,EAAME,OAAQA,EAAQC,KAAMA,GAAUF,IAIjE,OAAO,MAVRJ,CAWEb,IAELG,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEC,OAAM,eAAiBnC,EAAjB,IACNQ,UAAWA,EACXX,SAAUA,MAMlBH,EAAgB0C,UAAY,CAC1BxC,KAAMyC,IAAUC,MAAM,IAAIC,WAC1B1C,SAAUwC,IAAUC,MAAM,IAAIC,YAGjB7C,QC1Ef8C,EAAAC,EAAAC,EAAA,8BAAAC,IAWeC,UANiB,SAAAC,GAAK,OACnChC,EAAAC,EAAAC,cAAC+B,EAAA,EAAWD,EACVhC,EAAAC,EAAAC,cAACgC,EAAoBF,KAFzB,IAQaF,EAAS","file":"component---src-templates-categorized-list-jsx-fae14f446704dab078f4.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { flow, isEmpty, isEqual, slice, split, filter, map, get, size, toUpper } from 'lodash/fp';\nimport PostsWrapper from 'components/Common/PostsWrapper';\nimport Card from 'components/Common/Card';\nimport Pagination from 'components/Common/Pagination';\nimport getPosts from 'utils/getPosts';\nimport getPage from 'utils/getPage';\nimport { CONTENT_PER_PAGE } from 'constants';\n\nconst CategorizedList = ({ data, location }) => {\n  const page = getPage(3)(location);\n  const category = flow(\n    get('pathname'),\n    split('/'),\n    get('2')\n  )(location);\n  const allPosts = flow(\n    getPosts,\n    filter(\n      flow(\n        get('node.frontmatter.category'),\n        isEqual(category)\n      )\n    )\n  )(data);\n  const postCount = size(allPosts);\n  const posts = slice(\n    (page - 1) * CONTENT_PER_PAGE,\n    page * CONTENT_PER_PAGE\n  )(allPosts);\n\n  return (\n    <Fragment>\n      <PostsWrapper>\n        <Helmet>\n          <title>\n            {`WONISM | ${toUpper(category)}`}\n          </title>\n          <meta name=\"og:title\" content={`WONISM | ${toUpper(category)}`} />\n        </Helmet>\n        {isEmpty(posts) ? (\n          <div>\n            Posts Not Found.\n          </div>\n        ) : null}\n        {map((post) => {\n          if (post.node.path !== '/404/') {\n            const frontmatter = get('node.frontmatter')(post);\n            const { images, tags, path } = frontmatter;\n\n            return (\n              <Card key={path} path={path} images={images} tags={tags} {...frontmatter} />\n            );\n          }\n\n          return null;\n        })(posts)}\n      </PostsWrapper>\n      <Pagination\n        prefix={`/categories/${category}/`}\n        postCount={postCount}\n        location={location}\n      />\n    </Fragment>\n  );\n};\n\nCategorizedList.propTypes = {\n  data: PropTypes.shape({}).isRequired,\n  location: PropTypes.shape({}).isRequired,\n};\n\nexport default CategorizedList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from 'components/layout';\nimport CategorizedList from 'components/CategorizedList';\n\nconst CategorizedListTemplate = props => (\n  <Layout {...props}>\n    <CategorizedList {...props} />\n  </Layout>\n);\n\nexport default CategorizedListTemplate;\n\nexport const pageQuery = graphql`\n  query CategorizedListQuery {\n    allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            type\n            title\n            category\n            images\n            path\n            tags\n            date\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}